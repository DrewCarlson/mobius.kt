// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <org.drewcarlson:mobiuskt-coroutines>
abstract fun interface <#A: kotlin/Any?, #B: kotlin/Any?> kt.mobius.flow/FlowTransformer { // kt.mobius.flow/FlowTransformer|null[0]
    abstract fun invoke(kotlinx.coroutines.flow/Flow<#A>): kotlinx.coroutines.flow/Flow<#B> // kt.mobius.flow/FlowTransformer.invoke|invoke(kotlinx.coroutines.flow.Flow<1:0>){}[0]
}

abstract interface kt.mobius.flow/ExecutionPolicy { // kt.mobius.flow/ExecutionPolicy|null[0]
    abstract fun <#A1: kotlin/Any?, #B1: kotlin/Any?> execute(kotlin.coroutines/SuspendFunction2<kotlinx.coroutines.flow/FlowCollector<#B1>, #A1, kotlin/Unit>, kotlinx.coroutines.flow/Flow<#A1>): kotlinx.coroutines.flow/Flow<#B1> // kt.mobius.flow/ExecutionPolicy.execute|execute(kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.flow.FlowCollector<0:1>,0:0,kotlin.Unit>;kotlinx.coroutines.flow.Flow<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

    final class Concurrent : kt.mobius.flow/ExecutionPolicy { // kt.mobius.flow/ExecutionPolicy.Concurrent|null[0]
        constructor <init>(kotlin/Int) // kt.mobius.flow/ExecutionPolicy.Concurrent.<init>|<init>(kotlin.Int){}[0]

        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> execute(kotlin.coroutines/SuspendFunction2<kotlinx.coroutines.flow/FlowCollector<#B2>, #A2, kotlin/Unit>, kotlinx.coroutines.flow/Flow<#A2>): kotlinx.coroutines.flow/Flow<#B2> // kt.mobius.flow/ExecutionPolicy.Concurrent.execute|execute(kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.flow.FlowCollector<0:1>,0:0,kotlin.Unit>;kotlinx.coroutines.flow.Flow<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]

        final object Companion : kt.mobius.flow/ExecutionPolicy { // kt.mobius.flow/ExecutionPolicy.Concurrent.Companion|null[0]
            final fun <#A3: kotlin/Any?, #B3: kotlin/Any?> execute(kotlin.coroutines/SuspendFunction2<kotlinx.coroutines.flow/FlowCollector<#B3>, #A3, kotlin/Unit>, kotlinx.coroutines.flow/Flow<#A3>): kotlinx.coroutines.flow/Flow<#B3> // kt.mobius.flow/ExecutionPolicy.Concurrent.Companion.execute|execute(kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.flow.FlowCollector<0:1>,0:0,kotlin.Unit>;kotlinx.coroutines.flow.Flow<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
        }
    }

    final class ThrottleLatest : kt.mobius.flow/ExecutionPolicy { // kt.mobius.flow/ExecutionPolicy.ThrottleLatest|null[0]
        constructor <init>(kotlin.time/Duration) // kt.mobius.flow/ExecutionPolicy.ThrottleLatest.<init>|<init>(kotlin.time.Duration){}[0]

        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> execute(kotlin.coroutines/SuspendFunction2<kotlinx.coroutines.flow/FlowCollector<#B2>, #A2, kotlin/Unit>, kotlinx.coroutines.flow/Flow<#A2>): kotlinx.coroutines.flow/Flow<#B2> // kt.mobius.flow/ExecutionPolicy.ThrottleLatest.execute|execute(kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.flow.FlowCollector<0:1>,0:0,kotlin.Unit>;kotlinx.coroutines.flow.Flow<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    }

    final object Latest : kt.mobius.flow/ExecutionPolicy { // kt.mobius.flow/ExecutionPolicy.Latest|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> execute(kotlin.coroutines/SuspendFunction2<kotlinx.coroutines.flow/FlowCollector<#B2>, #A2, kotlin/Unit>, kotlinx.coroutines.flow/Flow<#A2>): kotlinx.coroutines.flow/Flow<#B2> // kt.mobius.flow/ExecutionPolicy.Latest.execute|execute(kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.flow.FlowCollector<0:1>,0:0,kotlin.Unit>;kotlinx.coroutines.flow.Flow<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    }

    final object Sequential : kt.mobius.flow/ExecutionPolicy { // kt.mobius.flow/ExecutionPolicy.Sequential|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> execute(kotlin.coroutines/SuspendFunction2<kotlinx.coroutines.flow/FlowCollector<#B2>, #A2, kotlin/Unit>, kotlinx.coroutines.flow/Flow<#A2>): kotlinx.coroutines.flow/Flow<#B2> // kt.mobius.flow/ExecutionPolicy.Sequential.execute|execute(kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.flow.FlowCollector<0:1>,0:0,kotlin.Unit>;kotlinx.coroutines.flow.Flow<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    }
}

final class <#A: kotlin/Any, #B: kotlin/Any?> kt.mobius.flow/SubtypeEffectHandlerBuilder { // kt.mobius.flow/SubtypeEffectHandlerBuilder|null[0]
    constructor <init>(kt.mobius.flow/ExecutionPolicy) // kt.mobius.flow/SubtypeEffectHandlerBuilder.<init>|<init>(kt.mobius.flow.ExecutionPolicy){}[0]

    final val defaultExecutionPolicy // kt.mobius.flow/SubtypeEffectHandlerBuilder.defaultExecutionPolicy|{}defaultExecutionPolicy[0]
        final fun <get-defaultExecutionPolicy>(): kt.mobius.flow/ExecutionPolicy // kt.mobius.flow/SubtypeEffectHandlerBuilder.defaultExecutionPolicy.<get-defaultExecutionPolicy>|<get-defaultExecutionPolicy>(){}[0]

    final fun <#A1: #A> addFlowTransformer(kotlin.reflect/KClass<#A1>, kt.mobius.flow/FlowTransformer<#A1, #B>) // kt.mobius.flow/SubtypeEffectHandlerBuilder.addFlowTransformer|addFlowTransformer(kotlin.reflect.KClass<0:0>;kt.mobius.flow.FlowTransformer<0:0,1:1>){0§<1:0>}[0]
    final fun <#A1: #A> addHandler(kotlin.reflect/KClass<#A1>, kt.mobius.flow/ExecutionPolicy, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines.flow/FlowCollector<#B>, #A1, kotlin/Unit> = ...) // kt.mobius.flow/SubtypeEffectHandlerBuilder.addHandler|addHandler(kotlin.reflect.KClass<0:0>;kt.mobius.flow.ExecutionPolicy;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.flow.FlowCollector<1:1>,0:0,kotlin.Unit>){0§<1:0>}[0]
    final fun build(): kt.mobius.flow/FlowTransformer<#A, #B> // kt.mobius.flow/SubtypeEffectHandlerBuilder.build|build(){}[0]
    final inline fun <#A1: reified #A> addAction(crossinline kotlin.coroutines/SuspendFunction0<kotlin/Unit>) // kt.mobius.flow/SubtypeEffectHandlerBuilder.addAction|addAction(kotlin.coroutines.SuspendFunction0<kotlin.Unit>){0§<1:0>}[0]
    final inline fun <#A1: reified #A> addAction(kt.mobius.flow/ExecutionPolicy, crossinline kotlin.coroutines/SuspendFunction0<kotlin/Unit>) // kt.mobius.flow/SubtypeEffectHandlerBuilder.addAction|addAction(kt.mobius.flow.ExecutionPolicy;kotlin.coroutines.SuspendFunction0<kotlin.Unit>){0§<1:0>}[0]
    final inline fun <#A1: reified #A> addConsumer(crossinline kotlin.coroutines/SuspendFunction1<#A1, kotlin/Unit>) // kt.mobius.flow/SubtypeEffectHandlerBuilder.addConsumer|addConsumer(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0§<1:0>}[0]
    final inline fun <#A1: reified #A> addConsumer(kt.mobius.flow/ExecutionPolicy, crossinline kotlin.coroutines/SuspendFunction1<#A1, kotlin/Unit>) // kt.mobius.flow/SubtypeEffectHandlerBuilder.addConsumer|addConsumer(kt.mobius.flow.ExecutionPolicy;kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0§<1:0>}[0]
    final inline fun <#A1: reified #A> addFunction(crossinline kotlin.coroutines/SuspendFunction1<#A1, #B>) // kt.mobius.flow/SubtypeEffectHandlerBuilder.addFunction|addFunction(kotlin.coroutines.SuspendFunction1<0:0,1:1>){0§<1:0>}[0]
    final inline fun <#A1: reified #A> addFunction(kt.mobius.flow/ExecutionPolicy, noinline kotlin.coroutines/SuspendFunction1<#A1, #B>) // kt.mobius.flow/SubtypeEffectHandlerBuilder.addFunction|addFunction(kt.mobius.flow.ExecutionPolicy;kotlin.coroutines.SuspendFunction1<0:0,1:1>){0§<1:0>}[0]
    final inline fun <#A1: reified #A> addTransformer(noinline kotlin/Function1<kotlinx.coroutines.flow/Flow<#A1>, kotlinx.coroutines.flow/Flow<#B>>) // kt.mobius.flow/SubtypeEffectHandlerBuilder.addTransformer|addTransformer(kotlin.Function1<kotlinx.coroutines.flow.Flow<0:0>,kotlinx.coroutines.flow.Flow<1:1>>){0§<1:0>}[0]
    final inline fun <#A1: reified #A> addValueCollector(kt.mobius.flow/ExecutionPolicy = ..., crossinline kotlin.coroutines/SuspendFunction2<kotlinx.coroutines.flow/FlowCollector<#B>, #A1, kotlin/Unit>) // kt.mobius.flow/SubtypeEffectHandlerBuilder.addValueCollector|addValueCollector(kt.mobius.flow.ExecutionPolicy;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.flow.FlowCollector<1:1>,0:0,kotlin.Unit>){0§<1:0>}[0]
    final inline fun <#A1: reified #A> ignore() // kt.mobius.flow/SubtypeEffectHandlerBuilder.ignore|ignore(){0§<1:0>}[0]
}

final class kt.mobius.flow/DispatcherWorkRunner : kt.mobius.runners/WorkRunner { // kt.mobius.flow/DispatcherWorkRunner|null[0]
    constructor <init>(kotlinx.coroutines/CoroutineDispatcher) // kt.mobius.flow/DispatcherWorkRunner.<init>|<init>(kotlinx.coroutines.CoroutineDispatcher){}[0]

    final fun dispose() // kt.mobius.flow/DispatcherWorkRunner.dispose|dispose(){}[0]
    final fun post(kt.mobius.runners/Runnable) // kt.mobius.flow/DispatcherWorkRunner.post|post(kt.mobius.runners.Runnable){}[0]
}

final class kt.mobius.flow/UnknownEffectException : kotlin/RuntimeException { // kt.mobius.flow/UnknownEffectException|null[0]
    constructor <init>(kotlin/Any) // kt.mobius.flow/UnknownEffectException.<init>|<init>(kotlin.Any){}[0]

    final val effect // kt.mobius.flow/UnknownEffectException.effect|{}effect[0]
        final fun <get-effect>(): kotlin/Any // kt.mobius.flow/UnknownEffectException.effect.<get-effect>|<get-effect>(){}[0]
    final val message // kt.mobius.flow/UnknownEffectException.message|{}message[0]
        final fun <get-message>(): kotlin/String // kt.mobius.flow/UnknownEffectException.message.<get-message>|<get-message>(){}[0]

    final fun component1(): kotlin/Any // kt.mobius.flow/UnknownEffectException.component1|component1(){}[0]
    final fun copy(kotlin/Any = ...): kt.mobius.flow/UnknownEffectException // kt.mobius.flow/UnknownEffectException.copy|copy(kotlin.Any){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kt.mobius.flow/UnknownEffectException.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kt.mobius.flow/UnknownEffectException.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kt.mobius.flow/UnknownEffectException.toString|toString(){}[0]
}

final class kt.mobius.flow/UnrecoverableIncomingException : kotlin/RuntimeException { // kt.mobius.flow/UnrecoverableIncomingException|null[0]
    constructor <init>(kotlin/Throwable?) // kt.mobius.flow/UnrecoverableIncomingException.<init>|<init>(kotlin.Throwable?){}[0]

    final val cause // kt.mobius.flow/UnrecoverableIncomingException.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable? // kt.mobius.flow/UnrecoverableIncomingException.cause.<get-cause>|<get-cause>(){}[0]
}

final object kt.mobius.flow/FlowMobius { // kt.mobius.flow/FlowMobius|null[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?> loop(kt.mobius/Update<#A1, #B1, #C1>, kt.mobius.flow/FlowTransformer<#C1, #B1>): kt.mobius/MobiusLoop.Builder<#A1, #B1, #C1> // kt.mobius.flow/FlowMobius.loop|loop(kt.mobius.Update<0:0,0:1,0:2>;kt.mobius.flow.FlowTransformer<0:2,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?> loopFrom(kt.mobius/MobiusLoop.Factory<#A1, #B1, #C1>, #A1): kt.mobius.flow/FlowTransformer<#B1, #A1> // kt.mobius.flow/FlowMobius.loopFrom|loopFrom(kt.mobius.MobiusLoop.Factory<0:0,0:1,0:2>;0:0){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
}

final fun (kt.mobius.runners/WorkRunners).kt.mobius.flow/fromDispatcher(kotlinx.coroutines/CoroutineDispatcher): kt.mobius.runners/WorkRunner // kt.mobius.flow/fromDispatcher|fromDispatcher@kt.mobius.runners.WorkRunners(kotlinx.coroutines.CoroutineDispatcher){}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any?> kt.mobius.flow/subtypeEffectHandler(kotlin/Function1<kt.mobius.flow/SubtypeEffectHandlerBuilder<#A, #B>, kotlin/Unit>): kt.mobius.flow/FlowTransformer<#A, #B> // kt.mobius.flow/subtypeEffectHandler|subtypeEffectHandler(kotlin.Function1<kt.mobius.flow.SubtypeEffectHandlerBuilder<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any?> kt.mobius.flow/subtypeEffectHandler(kt.mobius.flow/ExecutionPolicy, kotlin/Function1<kt.mobius.flow/SubtypeEffectHandlerBuilder<#A, #B>, kotlin/Unit>): kt.mobius.flow/FlowTransformer<#A, #B> // kt.mobius.flow/subtypeEffectHandler|subtypeEffectHandler(kt.mobius.flow.ExecutionPolicy;kotlin.Function1<kt.mobius.flow.SubtypeEffectHandlerBuilder<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.coroutines.flow/Flow<#A>).kt.mobius.flow/transform(kt.mobius/Connectable<#A, #B>): kotlinx.coroutines.flow/Flow<#B> // kt.mobius.flow/transform|transform@kotlinx.coroutines.flow.Flow<0:0>(kt.mobius.Connectable<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kt.mobius.flow/FlowTransformer<#A, #B>).kt.mobius.flow/asConnectable(): kt.mobius/Connectable<#A, #B> // kt.mobius.flow/asConnectable|asConnectable@kt.mobius.flow.FlowTransformer<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kt.mobius.flow/flowConnectable(kt.mobius.flow/FlowTransformer<#A, #B>): kt.mobius/Connectable<#A, #B> // kt.mobius.flow/flowConnectable|flowConnectable(kt.mobius.flow.FlowTransformer<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kt.mobius.flow/flowTransformer(kt.mobius.flow/FlowTransformer<#A, #B>): kt.mobius.flow/FlowTransformer<#A, #B> // kt.mobius.flow/flowTransformer|flowTransformer(kt.mobius.flow.FlowTransformer<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.coroutines.flow/Flow<#A>).kt.mobius.flow/toEventSource(kotlinx.coroutines/CoroutineScope): kt.mobius/EventSource<#A> // kt.mobius.flow/toEventSource|toEventSource@kotlinx.coroutines.flow.Flow<0:0>(kotlinx.coroutines.CoroutineScope){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kt.mobius/EventSource<#A>).kt.mobius.flow/toFlow(): kotlinx.coroutines.flow/Flow<#A> // kt.mobius.flow/toFlow|toFlow@kt.mobius.EventSource<0:0>(){0§<kotlin.Any?>}[0]
